version: '3'
services:

  # https://github.com/wurstmeister/zookeeper-docker
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - spring-boot-microservice

  # https://hub.docker.com/r/confluentinc/cp-kafka/
  kafka:
    container_name: kafka
    image: wurstmeister/kafka:2.12-2.4.0
    environment:
      KAFKA_ADVERTISED_LISTENERS: >-
        LISTENER_DOCKER_INTERNAL://kafka:19092,
        LISTENER_DOCKER_EXTERNAL://kafka:9092
      KAFKA_LISTENERS: >-
        LISTENER_DOCKER_INTERNAL://:19092,
        LISTENER_DOCKER_EXTERNAL://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: >-
        LISTENER_DOCKER_INTERNAL:PLAINTEXT,
        LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: >-
        kafka.controller=INFO,
        kafka.producer.async.DefaultEventHandler=INFO,
        state.change.logger=INFO
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - spring-boot-microservice

  mysql:
    container_name: mysql
    image: mysql/mysql-server:5.7
    environment:
      MYSQL_DATABASE: e_commerce
      MYSQL_ROOT_PASSWORD: root
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3306:3306"
    #expose:
    #  - 3306
    restart: always
    volumes:
      - ./sql:/docker-entrypoint-initdb.d
    networks:
      - spring-boot-microservice


  admin-server:
    container_name: admin-server
    build: ./admin-server
    ports:
      - "8081:8081"
    depends_on:
      - mysql
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (nc -z mysql 3306); do sleep 5; echo 'Waiting for database to start-up...'; done;
      java -jar  /app.jar
      "
    networks:
      - spring-boot-microservice

  eureka-server:
    container_name: eureka-server
    build: ./eureka-server
    ports:
      - "8082:8082"
    depends_on:
      - admin-server
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (nc -z admin-server 8081); do sleep 5; echo 'Waiting for admin-server to start-up...'; done;
      java -jar  /app.jar
      "
    networks:
      - spring-boot-microservice

  zuul-server:
    container_name: zuul-server
    build: ./zuul-server
    ports:
      - "8089:8089"
    depends_on:
      - eureka-server
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (nc -z eureka-server 8082); do sleep 5; echo 'Waiting for eureka-server to start-up...'; done;
      java -jar  /app.jar
      "
    networks:
      - spring-boot-microservice



  config-server:
    container_name: config-server
    build: ./config-server
    ports:
      - "8088:8088"
    depends_on:
      - eureka-server
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (nc -z zuul-server 8089); do sleep 5; echo 'Waiting for zuul-server to start-up...'; done;
      java -jar  /app.jar
      "
    networks:
      - spring-boot-microservice

  oauth2-server:
    container_name: oauth2-server
    build: oauth2-server
    ports:
      - "8087:8087"
    depends_on:
      - config-server
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (nc -z config-server 8088); do sleep 5; echo 'Waiting for config-server to start-up...'; done;
      java -jar  /app.jar
      "
    networks:
      - spring-boot-microservice


  customer-service:
    container_name: customer-service
    build: ./customer-service
    ports:
      - "8765:8765"
    depends_on:
      - eureka-server
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (nc -z oauth2-server 8087); do sleep 5; echo 'Waiting for oauth2-server to start-up...'; done;
      java -jar  /app.jar
      "
    networks:
      - spring-boot-microservice

  order-service:
    container_name: order-service
    build: ./order-service
    ports:
      - "8764:8764"
    depends_on:
      - eureka-server
    entrypoint: /bin/sh
    command: >
      -c "
      while ! (nc -z customer-service 8765); do sleep 5; echo 'Waiting for customer-service to start-up...'; done;
      java -jar  /app.jar
      "
    networks:
      - spring-boot-microservice


  prometheus:
    image: prom/prometheus:v2.43.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/data:/prometheus
    restart: unless-stopped
    networks:
      - spring-boot-microservice


  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - spring-boot-microservice

volumes:
  grafana-data:


networks:
  spring-boot-microservice:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/24

